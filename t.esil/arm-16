#!/bin/sh

# GPL 3+ - Copyright (C) 2015  ninjahacker

for a in . .. ../.. ; do [ -e $a/tests.sh ] && . $a/tests.sh ; done

NAME='cmp neq unchanged zf'
FILE=-
ARGS=
CMDS='
e esil.debug=true
e asm.arch=arm
e asm.bits=16
aei
aeim
aer sp=0x00108000
.aer*
wa cmp r1, 16
aes
aer?cpsr
'
EXPECT='0x00000000
'
run_test

NAME='cmp neq changed zf'
BROKEN=
FILE=-
ARGS=
CMDS='
e esil.debug=true
e asm.arch=arm
e asm.bits=16
aei
aeim
aer sp=0x00108000
aer cpsr=0xffffffff
.aer*
wa cmp r1, 16
aes
aer?cpsr
'
EXPECT='0xbfffffff
'
run_test

NAME='cmp eq unchanged zf'
FILE=-
ARGS=
CMDS='
e esil.debug=true
e asm.arch=arm
e asm.bits=16
aei
aeim
aer sp=0x00108000
aer r1=0x10
aer cpsr=0x40000000
.aer*
wa cmp r1, 16
aes
aer?cpsr
'
EXPECT='0x40000000
'
run_test

NAME='cmp eq changed zf'
BROKEN=
FILE=-
ARGS=
CMDS='
e esil.debug=true
e asm.arch=arm
e asm.bits=16
aei
aeim
aer sp=0x00108000
aer r1=0x10
aer cpsr=0x00000000
.aer*
wa cmp r1, 16
aes
aer?cpsr
'
EXPECT='0x40000000
'
run_test

# load cases

NAME="ldr.w r0, [r0, r1, lsl 2]"
BROKEN=1
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
ar > /dev/null
ar r0=4
ar r1=2
wx 50f82100
wx aaaaaaaabbbbbbbb44332211@4
aes
ar r0
'
EXPECT='0x11223344
'
run_test

# load/store multiple

NAME="ldm r3!, {r1, r4, r5}"
BROKEN=true
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
ar > /dev/null
ar r3=4		# address
ar r1=0		# init with dummy values
ar r4=0
ar r5=0
wx 32cb
wx 111111114444444455555555@4
aes
ar r1; ar r4; ar r5; ar r3
'
EXPECT='0x11111111
0x44444444
0x55555555
0x00000010
'
run_test

NAME="stm r2!, {r1, r4, r5}"
BROKEN=true
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
ar > /dev/null
ar r2=4		# address
ar r1=0x11111111
ar r4=0x44444444
ar r5=0x55555555
wx 32c2
aes
pfv x @ 4; pfv x @ 8; pfv x @ 12; ar r2
'
EXPECT='0x11111111
0x44444444
0x55555555
0x00000010
'
run_test

# TODO:
# PATCH `stm r2!, {r1, r4, r5}` (@0x080001fc): `r1,r2,4,+,=[4],r4,r2,8,+,=[4],r5,r2,12,+,=[4],` ===> `r1,r2,0,+,=[4],r4,r2,4,+,=[4],r5,r2,8,+,=[4],12,r2,+=`


# bit fields

NAME="ubfx r2, r0, 8, 8"
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
ar > /dev/null
ar r0=0x11223344
wx c0f30722
aes
ar r2
'
EXPECT='0x00000033
'
run_test

NAME="it eq"
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
wx 08bf
aoe
'
EXPECT='0x0 zf,?{,4,pc,+=,}
'
run_test

NAME="it ne"
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
wx 18bf00000000
aoe
'
EXPECT='0x0 zf,!,?{,4,pc,+=,}
'
run_test

NAME="it hs"
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
wx 28bf00000000
aoe
'
EXPECT='0x0 cf,?{,4,pc,+=,}
'
run_test

NAME="it lo"
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
wx 38bf00000000
aoe
'
EXPECT='0x0 cf,!,?{,4,pc,+=,}
'
run_test

NAME="it mi"
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
wx 48bf00000000
aoe
'
EXPECT='0x0 nf,?{,4,pc,+=,}
'
run_test

NAME="it pl"
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
wx 58bf00000000
aoe
'
EXPECT='0x0 nf,!,?{,4,pc,+=,}
'
run_test

NAME="it vs"
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
wx 68bf00000000
aoe
'
EXPECT='0x0 vf,?{,4,pc,+=,}
'
run_test

NAME="it vc"
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
wx 78bf00000000
aoe
'
EXPECT='0x0 vf,!,?{,4,pc,+=,}
'
run_test

NAME="it hi"
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
wx 88bf00000000
aoe
'
EXPECT='0x0 cf,?{,zf,!,?{,4,pc,+=,},}
'
run_test

NAME="it ls"
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
wx 98bf00000000
aoe
'
EXPECT='0x0 cf,!,?{,zf,?{,4,pc,+=,},}
'
run_test


NAME="it ge"
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
wx a8bf00000000
aoe
'
EXPECT='0x0 nf,vf,==,?{,4,pc,+=,}
'
run_test

NAME="it lt"
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
wx b8bf00000000
aoe
'
EXPECT='0x0 nf,vf,==,!,?{,4,pc,+=,}
'
run_test

NAME="it gt"
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
wx c8bf00000000
aoe
'
EXPECT='0x0 zf,!,?{,nf,vf,==,?{,4,pc,+=,},}
'
run_test

NAME="it le"
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
wx d8bf00000000
aoe
'
EXPECT='0x0 zf,?{,nf,vf,==,!,?{,4,pc,+=,},}
'
run_test

NAME="it al"
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
wx e8bf00000000
aoe
'
EXPECT='0x0 4,pc,+=
'
run_test

# LDR (register)
NAME="ldr r2, [r3, r1]"
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
ar r3=1
ar r1=2
wx 5a58aabbccddeeff
aes
ar r2
'
EXPECT='0xeeddccbb
'
run_test

# logic vs arithmetic shifts
NAME="lsrs r4, r4, 2"
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
ar > /dev/null
ar r4=-8
wx a408
aes
ar r4
'
EXPECT='0x3ffffffe
'
run_test

# -8 == 0xfffffff8 (Two's complement on 32bit)
NAME="asrs r4, r4, 2"
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
ar > /dev/null
ar r4=-8
wx a410
aes
ar r4
'
EXPECT='0xfffffffe
'
run_test

NAME="orn"
BROKEN=
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
ar r1=0x3
ar r2=0x7
wv 0x0002ea61
aes
ar r0
'
EXPECT='0xfffffffb
'
run_test

NAME="add pc"
BROKEN=
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
wv 0x4478
aes
ar r0
'
EXPECT='0x00000004
'
run_test

NAME="ldm.w r0, {r4, r6}"
BROKEN=
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
wx 90e85000
wv 0x11223344 @ 4
wv 0x55667788 @ 8
aer r0=4
aes
ar r4
ar r6
'
EXPECT='0x11223344
0x55667788
'
run_test

NAME="ldr wrapping around addresses"
BROKEN=
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
wx 7158 #ldr r1, [r6, r1]
wv 0x11223344 @ 2
aer r1=0x4796eebe
aer r6=0xb8691144
aes
ar r1
'
EXPECT='0x11223344
'
run_test

NAME="add wrapping around"
BROKEN=
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
wx 0144 #add r1, r0
aer r1=0x4796eebe
aer r0=0xb8691144
aes
ar r1
'
EXPECT='0x00000002
'
run_test

NAME="smmla"
BROKEN=
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
wx 51fb0001 #smmla r1, r1, r0, r0
aer r1=0x4796eebe
aer r0=0x11
aes
ar r1
'
EXPECT='0x00000015
'
run_test

NAME="smmlar"
BROKEN=
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
wx 51fb1001 #smmlar r1, r1, r0, r0
aer r1=0x4796eebe
aer r0=0x11
aes
ar r1
'
EXPECT='0x00000016
'
run_test

NAME="umull"
BROKEN=
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
wx a1fb0212 #umull r1, r2, r1, r2
aer r1=0x4796eebe
aer r2=0x11
aes
ar r1
ar r2
'
EXPECT='0xc105da9e
0x00000004
'
run_test

NAME="mls"
BROKEN=
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
wx 01fb1200 #mls r0, r1, r2, r0
aer r0=0x16161616
aer r1=0x45
aer r2=0x7823834
aes
ar r0
'
EXPECT='0x0ffcf012
'
run_test

NAME="mla"
BROKEN=
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
wx 00fb0211 #mla r1, r0, r2, r1
aer r1=0x16161616
aer r0=0x45
aer r2=0x7823834
aes
ar r1
'
EXPECT='0x1c2f3c1a
'
run_test

NAME="mvn"
BROKEN=
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
wx 6ff01201 #mvn r1, 0x12
aes
ar r1
'
EXPECT='0xffffffed
'
run_test

NAME="bfc"
BROKEN=
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
aer r4=0x696969f9
wx 6ff30604 #bfc r4, 0, 7
aes
ar r4
'
EXPECT='0x69696980
'
run_test

NAME="bfi"
BROKEN=
FILE=malloc://0x200
CMDS='
e asm.arch=arm
e asm.bits=16
aer r2=0x696969f9
aer r3=0x33333333
wx 62f38703 #bfi r3, r2, 2, 6
aes
ar r3
'
EXPECT='0x333333e7
'
run_test

NAME='cbz/cbnz likeliness'
ARGS=
CMDS='e asm.arch=arm
e asm.bits=16
e cfg.bigendian=false
e asm.emu.str=true
wv2 0x2000
wv2 0x2101 @ 2
wv2 0xb100 @ 4
wv2 0xbf00 @ 6
wv2 0x2000 @ 8
wv2 0x2101 @ 10
wv2 0xb900 @ 12
pd 7
'
EXPECT='            0x00000000      0020           movs r0, 0
            0x00000002      0121           movs r1, 1
        ,=< 0x00000004      00b1           cbz r0, 8                   ; likely
        |   0x00000006      00bf           nop
        `-> 0x00000008      0020           movs r0, 0
            0x0000000a      0121           movs r1, 1
        ,=< 0x0000000c      00b9           cbnz r0, 0x10               ; unlikely
'
run_test
